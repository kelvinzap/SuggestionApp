@page "/Details/{id}"
@inject ISuggestionData SuggestionData
@inject NavigationManager NavigationManager
@inject IUserData _userData
@inject AuthenticationStateProvider authProvider

<h1>Suggestion Details</h1>

<div>
    <div>
        @if (suggestion is not null)
        {
            <div>
                <div>
                    <div @onclick="VoteUp">
                        <div>@GetUpVoteTopText()</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvoteBottomText()</div>
                    </div>
                    <div>
                        <div>@suggestion.DateCreated.ToString("MM.dd.yyyy")</div> 
                    </div>
                </div>
                <div>
                    <div>@suggestion.Suggestion</div>
                    <div>@suggestion.Author.DisplayName</div>
                    <div>@suggestion.Description</div>
                    <div>
                        @suggestion.Category.CategoryName
                    </div>
                </div>
                <div>
                    <button @onclick="ClosePage"></button>
                </div>
            </div>
        }
    </div>
</div>

@if (suggestion?.SuggestionStatus is not null)
{
    <div>
        <div>
            <div></div>
            <div>
                <div>
                    @suggestion.SuggestionStatus.StatusName
                </div>
                <div>
                    @((MarkupString)suggestion.OwnerNotes)
                </div>
            </div>
        </div>
    </div>
}
@code {
    private UserModel loggedInUser;
    [Parameter]
    public string Id { get; set; }

    private SuggestionModel suggestion;

    protected override async Task OnInitializedAsync()
    {
        suggestion = await SuggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(_userData);
    }

    private void ClosePage()
    {
        NavigationManager.NavigateTo("/");
    }
    
    private async Task VoteUp()
    {
        if (loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
    //can't vote on your own suggestion
                return;
            }
            if (!suggestion.UserVotes.Add(loggedInUser.Id))
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await SuggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);
        }
        else
        {
            NavigationManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetUpVoteTopText()
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            return suggestion.Author.Id == loggedInUser.Id ? "Awaiting" : "Click To";
        }
    }
    
    private string GetUpvoteBottomText()
    {
        return suggestion.UserVotes?.Count > 1 ? "Upvotes" : "Upvote";
    }
}