@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategoryData _categoryData
@inject IStatusData _statusData
@inject IUserData _userData
@inject ISuggestionData _suggestionData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject ProtectedLocalStorage LocalStorage


<h1>Training Suggestions</h1>
<br/>
<div>
    <button>Suggest</button>
</div>

<div>
    <div>@suggestions?.Count Suggestions</div>
    <div>
        <button @onclick="(() => OrderByNew(true))">New</button>
        <button @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div>
        <input type="text" placeholder="search" aria-label="Search box" 
               @oninput="((txt) => OnSearchInput((string)txt.Value))"/> 
    </div>
</div>

<div>
    <div>
        @if (suggestions is not null)
        {
            <Virtualize Items="suggestions" Context="s"  OverscanCount="10">
                <div>
                    <div @onclick="(() => VoteUp(s))">
                        <div>@GetUpVoteTopText(s)</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvoteBottomText(s)</div>
                    </div>
                    <div>
                        <div @onclick="(() => OpenDetails(s))">
                            @s.Suggestion
                        </div>
                        <div @onclick="(() => OpenDetails(s))">
                            @s.Category?.CategoryName
                        </div>
                    </div>
                    <div>
                        <div>
                            @s.SuggestionStatus?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
</div>
<div>
    @if (categories is not null)
    {
        <div>
            <span>Category</span>
            <div @onclick="(() => OnCategoryClick())">All</div>
            @foreach (var c in categories)
            {
                <div @onclick="(() => OnCategoryClick(c.CategoryName))">
                     @c.CategoryName
                </div>
            }
        </div>
    }
    @if (statuses is not null)
    {
        <div>
            <span>Statuses</span>
            <div @onclick="(() => OnStatusClick())">All</div>
            @foreach (var s in statuses)
            {
                <div @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
            }
        </div>
    }
</div>

@code{
    private UserModel loggedInUser =  new();
    private List<SuggestionModel> suggestions = new();
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;
    

    protected override async Task OnInitializedAsync()
    {
        categories = await _categoryData.GetAllCategoriesAsync();
        statuses = await _statusData.GetAllStatusesAsync();
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    { 
        var authState = await authProvider.GetAuthenticationStateAsync();
        var objectId = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("objectidentifier"))?.Value;

        if (!string.IsNullOrWhiteSpace(objectId))
        {
            loggedInUser = await _userData.GetUserFromAuthentication(objectId) ?? new();

            var firstName = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("givenname"))?.Value;
            var LastName = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("surname"))?.Value;
            var DisplayName = authState.User.Claims.FirstOrDefault(x => x.Type.Equals("name"))?.Value;
            var email = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("email"))?.Value;

            bool isDirty = false;

            if (!objectId.Equals(loggedInUser.ObjectIdentifier))
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            
            if (!firstName.Equals(loggedInUser.FirstName))
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
           
            if (!LastName.Equals(loggedInUser.LastName))
            {
                isDirty = true;
                loggedInUser.LastName = LastName;
            }
            
            if (!DisplayName.Equals(loggedInUser.DisplayName))
            {
                isDirty = true;
                loggedInUser.DisplayName = DisplayName;
            }

            if (!email.Equals(loggedInUser.EmailAddress))
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await _userData.CreateUser(loggedInUser);
                }
                else
                {
                    await _userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";
        
        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";
        
        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = !boolResults.Success || boolResults.Value;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await _suggestionData.GetAllApprovedSuggestions();

        if (selectedCategory != "All")
        {
            output = output.Where(x => x.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(x => x.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            output = output.Where(x => 
                x.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                x.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(x => x.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(x => x.UserVotes.Count)
                .ThenByDescending(x => x.DateCreated).ToList();
        }

        suggestions = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if (loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                //can't vote on your own suggestion
                return;
            }
            if (!suggestion.UserVotes.Add(loggedInUser.Id))
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await _suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);

            if (!isSortedByNew)
            {
                suggestions = suggestions
                    .OrderByDescending(s => s.UserVotes.Count)
                    .ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetUpVoteTopText(SuggestionModel suggestion)
    {

        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
       
            return suggestion.Author.Id == loggedInUser.Id ? "Awaiting" : "Click To";
       
         
    }
    
    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        return suggestion.UserVotes?.Count > 1 ? "Upvotes" : "Upvote";
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }
}

